/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  Recipient,
} from './components/demo/data-tunnel';

declare global {

  namespace StencilComponents {
    interface DemoApp {

    }
  }

  interface HTMLDemoAppElement extends StencilComponents.DemoApp, HTMLStencilElement {}

  var HTMLDemoAppElement: {
    prototype: HTMLDemoAppElement;
    new (): HTMLDemoAppElement;
  };
  interface HTMLElementTagNameMap {
    'demo-app': HTMLDemoAppElement;
  }
  interface ElementTagNameMap {
    'demo-app': HTMLDemoAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'demo-app': JSXElements.DemoAppAttributes;
    }
  }
  namespace JSXElements {
    export interface DemoAppAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface DemoCreateMessage {
      'getReceiverList': () => Promise<Recipient[]>;
      'sendMessage': (msg: string, recipients: Recipient[]) => Promise<void>;
      'setCreatingMessage': (createMessage: boolean) => void;
    }
  }

  interface HTMLDemoCreateMessageElement extends StencilComponents.DemoCreateMessage, HTMLStencilElement {}

  var HTMLDemoCreateMessageElement: {
    prototype: HTMLDemoCreateMessageElement;
    new (): HTMLDemoCreateMessageElement;
  };
  interface HTMLElementTagNameMap {
    'demo-create-message': HTMLDemoCreateMessageElement;
  }
  interface ElementTagNameMap {
    'demo-create-message': HTMLDemoCreateMessageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'demo-create-message': JSXElements.DemoCreateMessageAttributes;
    }
  }
  namespace JSXElements {
    export interface DemoCreateMessageAttributes extends HTMLAttributes {
      'getReceiverList'?: () => Promise<Recipient[]>;
      'sendMessage'?: (msg: string, recipients: Recipient[]) => Promise<void>;
      'setCreatingMessage'?: (createMessage: boolean) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface DemoMessageLog {

    }
  }

  interface HTMLDemoMessageLogElement extends StencilComponents.DemoMessageLog, HTMLStencilElement {}

  var HTMLDemoMessageLogElement: {
    prototype: HTMLDemoMessageLogElement;
    new (): HTMLDemoMessageLogElement;
  };
  interface HTMLElementTagNameMap {
    'demo-message-log': HTMLDemoMessageLogElement;
  }
  interface ElementTagNameMap {
    'demo-message-log': HTMLDemoMessageLogElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'demo-message-log': JSXElements.DemoMessageLogAttributes;
    }
  }
  namespace JSXElements {
    export interface DemoMessageLogAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ContextConsumer {
      'context': { [key: string]: any };
      'renderer': any;
      'subscribe': (el: any, props: string[] | string) => () => void;
    }
  }

  interface HTMLContextConsumerElement extends StencilComponents.ContextConsumer, HTMLStencilElement {}

  var HTMLContextConsumerElement: {
    prototype: HTMLContextConsumerElement;
    new (): HTMLContextConsumerElement;
  };
  interface HTMLElementTagNameMap {
    'context-consumer': HTMLContextConsumerElement;
  }
  interface ElementTagNameMap {
    'context-consumer': HTMLContextConsumerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'context-consumer': JSXElements.ContextConsumerAttributes;
    }
  }
  namespace JSXElements {
    export interface ContextConsumerAttributes extends HTMLAttributes {
      'context'?: { [key: string]: any };
      'renderer'?: any;
      'subscribe'?: (el: any, props: string[] | string) => () => void;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;