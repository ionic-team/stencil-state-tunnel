/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface ContextConsumer {
      'context': { [key: string]: any };
      'renderer': any;
      'subscribe': (el: any, props: string[] | string) => () => void;
    }
  }

  interface HTMLContextConsumerElement extends StencilComponents.ContextConsumer, HTMLStencilElement {}

  var HTMLContextConsumerElement: {
    prototype: HTMLContextConsumerElement;
    new (): HTMLContextConsumerElement;
  };
  interface HTMLElementTagNameMap {
    'context-consumer': HTMLContextConsumerElement;
  }
  interface ElementTagNameMap {
    'context-consumer': HTMLContextConsumerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'context-consumer': JSXElements.ContextConsumerAttributes;
    }
  }
  namespace JSXElements {
    export interface ContextConsumerAttributes extends HTMLAttributes {
      'context'?: { [key: string]: any };
      'renderer'?: any;
      'subscribe'?: (el: any, props: string[] | string) => () => void;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;